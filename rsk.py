"""
This script implements the Robinson-Schensted-Knuth (RSK) algorithm and related functions for generating and manipulating tableaux.

Functions:
    generate_tableau(alpha, n):
        Generates a tableau using the RSK algorithm based on a given probability distribution and number of samples.

    rsk_insert(val, ssyt, row=0):
        Inserts a value into a given row of a shifted tableau (ssyt) following the RSK insertion algorithm.

    rsk(x, d):
        Applies the RSK correspondence to a list of elements, producing a partition padded with zeroes to a specified length.

    eyd(l):
        Computes the empirical young diagram (EYD) estimator by normalizing the input tableau.

Example:
    a = [1,3,3,2,1,3,4,4,3,2]
    assert(rsk(a, 4) == [5, 3, 1, 1])
"""

import numpy as np


def generate_tableau(alpha, n):
    """
    Generates a tableau using the Robinson-Schensted-Knuth (RSK) algorithm.

    Parameters:
    alpha (list of float): A list of probabilities that sum to 1, representing the distribution from which to sample.
    n (int): The number of samples to generate.

    Returns:
    tuple: A tuple representing the tableau generated by the RSK algorithm.
    """
    d = len(alpha)
    np.random.seed()
    sample = np.random.choice(range(1, d + 1), n, p=alpha)
    return rsk(sample, d)


def rsk_insert(val, ssyt, row=0):
    """
    Inserts a value into a given row of a shifted tableau (ssyt) following the 
    Robinson-Schensted-Knuth (RSK) insertion algorithm.

    Parameters:
    val (int): The value to be inserted.
    ssyt (list of lists): The shifted tableau where the value will be inserted.
    row (int, optional): The current row being inserted into. Defaults to 0.

    Returns:
    None: The function modifies the ssyt in place.
    """
    isSmaller = list(map(lambda x: x < val, ssyt[row]))
    if True in isSmaller:
        insertIndex = isSmaller.index(True)
        newval = ssyt[row][insertIndex]
        ssyt[row][insertIndex] = val
        if len(ssyt) == row + 1:
            ssyt.append([newval])
        else:
            rsk_insert(newval, ssyt, row + 1)
    else:
        ssyt[row].append(val)


def rsk(x, d):
    """
    Applies the Robinson-Schensted-Knuth (RSK) correspondence to a list of elements.

    The RSK correspondence is a combinatorial algorithm that takes a sequence of elements and outputs a partition (a sequence of non-increasing integers) padded with zeroes to a specified length.

    Args:
        x (list): A list of elements where each element is an integer in the range [1, d].
        d (int): The length to which the output partition should be padded with zeroes.

    Returns:
        list: A list representing the partition obtained from the RSK correspondence, padded with zeroes to length d.
    """
    ssyt = [[]]
    for val in x:
        rsk_insert(val, ssyt)
    lamb = []
    for row in ssyt:
        lamb.append(len(row))
    lamb += (d - len(lamb)) * [0]
    return lamb


def eyd(l):
    """
    Compute the empirical young diagram (EYD) estimator.

    The EYD estimator normalizes the input tableau by dividing each element by the sum of all elements.

    Parameters:
    l (list or array-like): A tableau with non-negative entries.

    Returns:
    numpy.ndarray: The normalized tableau where each element is divided by the sum of all elements in the input tableau.
    """
    d = len(l)
    estimate = np.zeros(d)
    for i in range(len(l)):
        estimate[i] = l[i]
    return estimate / np.sum(estimate)


if __name__=="__main__":
    a = [1,3,3,2,1,3,4,4,3,2] # Test from OW survey: should output [4,4,3,3,2],[3,3,1],[2],[1]
    assert(rsk(a, 4)==[5,3,1,1])
    print("Test passed!")

